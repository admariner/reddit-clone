{"version":3,"sources":["components/Nav.js","components/Card.js","components/Subreadit.js","components/User.js","components/LoadingSpinner.js","components/ErrorMessage.js","pages/HomePage.js","components/Post.js","components/Comment.js","pages/PostPage.js","pages/SubreaditPage.js","pages/UserPage.js","App.js","apolloClient.js","index.js"],"names":["Nav","className","to","Card","children","Subreadit","isPreview","title","description","User","postCount","commentCount","userName","bio","LoadingSpinner","ErrorMessage","FETCH_SUBREADITS_AND_USERS","gql","HomePage","useQuery","loading","data","error","querySubreadit","map","subreadit","name","queryUser","user","postsAggregate","count","commentsAggregate","Post","isOnSubreaditPage","isOnUserPage","id","voteCount","subreaditName","Comment","commentContent","postTitle","postId","isOnPostPage","PostPageWithRouter","withRouter","match","FETCH_POST_WITH_COMMENTS","params","getPost","comments","length","comment","SubreaditPageWithRouter","FETCH_SUBREADIT_WITH_POSTS","posts","post","UserPageWithRouter","FETCH_USER","App","basename","path","apolloClient","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.a729e8d2.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Nav.css'\n\nexport const Nav = () => (\n  <nav>\n    <span className=\"appName\">Readit</span>\n    <Link to=\"/\">Home</Link>\n  </nav>\n)\n","import React from 'react'\nimport './Card.css'\n\nexport const Card = ({ children }) => <div className=\"card\">{children}</div>\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card } from './Card'\nimport './Subreadit.css'\n\nexport const Subreadit = ({ isPreview = false, title, description }) => (\n  <Card>\n    {isPreview ? (\n      <h3 className=\"subreaditTitle\">\n        <Link to={`/subreadit/${title}`}>r/{title}</Link>\n      </h3>\n    ) : (\n      <h1 className=\"subreaditTitle\">r/{title}</h1>\n    )}\n    <p className=\"subreaditDescription\">{description}</p>\n  </Card>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card } from './Card'\nimport './User.css'\n\nexport const User = ({\n  isPreview = false,\n  postCount = 0,\n  commentCount = 0,\n  userName,\n  bio,\n}) => (\n  <Card>\n    {isPreview ? (\n      <h3 className=\"userName\">\n        <Link to={`/user/${userName}`}>u/{userName}</Link>\n      </h3>\n    ) : (\n      <h1 className=\"userName\">{userName}</h1>\n    )}\n    <p>{bio}</p>\n    <p className=\"userStats\">\n      <span className=\"userPostCount\">\n        {postCount} {postCount === 1 ? 'post' : 'posts'}\n      </span>\n      {' | '}\n      <span className=\"userCommentCount\">\n        {commentCount} {commentCount === 1 ? 'comment' : 'comments'}\n      </span>\n    </p>\n  </Card>\n)\n","import React from 'react'\nimport './LoadingSpinner.css'\n\nexport const LoadingSpinner = () => <div className=\"loadingSpinner\" />\n","import React from 'react'\n\nexport const ErrorMessage = () => (\n  <p>Error fetching data. Please try again later.</p>\n)\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { Subreadit } from '../components/Subreadit'\nimport { User } from '../components/User'\nimport { LoadingSpinner } from '../components/LoadingSpinner'\nimport { ErrorMessage } from '../components/ErrorMessage'\nimport './HomePage.css'\n\nconst FETCH_SUBREADITS_AND_USERS = gql`\n  query FetchSubreaditsAndUsers {\n    querySubreadit {\n      name\n      description\n    }\n    queryUser {\n      userName\n      bio\n      postsAggregate {\n        count\n      }\n      commentsAggregate {\n        count\n      }\n    }\n  }\n`\n\nexport const HomePage = () => {\n  const { loading, data, error } = useQuery(FETCH_SUBREADITS_AND_USERS)\n\n  return (\n    <div className=\"homePage\">\n      <h1 className=\"srOnly\">Home</h1>\n      <p>\n        Welcome to Readit, a community of bookworms discussing their favorite\n        books! Find a subreadit to browse or a user to follow below.\n      </p>\n      <h2>Popular Subreadits</h2>\n      {loading && <LoadingSpinner />}\n      {error && <ErrorMessage />}\n      {data && (\n        <div className=\"subreaditsSection\">\n          {data.querySubreadit.map(subreadit => (\n            <Subreadit\n              key={subreadit.name}\n              isPreview\n              title={subreadit.name}\n              description={subreadit.description}\n            />\n          ))}\n        </div>\n      )}\n      <h2>Popular Users</h2>\n      {loading && <LoadingSpinner />}\n      {error && <ErrorMessage />}\n      {data && (\n        <div className=\"usersSection\">\n          {data.queryUser.map(user => (\n            <User\n              key={user.userName}\n              isPreview\n              userName={user.userName}\n              bio={user.bio}\n              postCount={user.postsAggregate?.count}\n              commentCount={user.commentsAggregate?.count}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card } from './Card'\nimport './Post.css'\n\nexport const Post = ({\n  isPreview = false,\n  isOnSubreaditPage = false,\n  isOnUserPage = false,\n  id,\n  title,\n  voteCount = 0,\n  commentCount = 0,\n  subreaditName,\n  userName,\n}) => (\n  <Card>\n    <p className=\"postLocation\">\n      Posted\n      {!isOnUserPage && (\n        <span className=\"postUser\">\n          {' '}\n          by <Link to={`/user/${userName}`}>u/{userName}</Link>\n        </span>\n      )}\n      {!isOnSubreaditPage && (\n        <span className=\"postSubreadit\">\n          {' '}\n          in <Link to={`/subreadit/${subreaditName}`}>r/{subreaditName}</Link>\n        </span>\n      )}\n    </p>\n    {isPreview ? (\n      <h3 className=\"postTitle\">\n        <Link to={`/post/${id}`}>{title}</Link>\n      </h3>\n    ) : (\n      <h1 className=\"postTitle\">{title}</h1>\n    )}\n    <p className=\"postStats\">\n      <span className=\"postVoteCount\">\n        {voteCount} {voteCount === 1 ? 'vote' : 'votes'}\n      </span>\n      {' | '}\n      <span className=\"postCommentCount\">\n        {commentCount} {commentCount === 1 ? 'comment' : 'comments'}\n      </span>\n    </p>\n  </Card>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card } from './Card'\nimport './Comment.css'\n\nexport const Comment = ({\n  commentContent,\n  voteCount = 0,\n  userName,\n  postTitle,\n  postId,\n  isOnUserPage,\n  isOnPostPage,\n}) => (\n  <Card>\n    <p className=\"commentLocation\">\n      Commented\n      {!isOnUserPage && (\n        <span className=\"commentUser\">\n          {' '}\n          by <Link to={`/user/${userName}`}>u/{userName}</Link>\n        </span>\n      )}\n      {!isOnPostPage && (\n        <span className=\"commentPost\">\n          {' '}\n          on <Link to={`/post/${postId}`}>{postTitle}</Link>\n        </span>\n      )}\n    </p>\n    <p className=\"commentContent\">{commentContent}</p>\n    <p className=\"commentVoteCount\">\n      {voteCount} {voteCount === 1 ? 'vote' : 'votes'}\n    </p>\n  </Card>\n)\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { withRouter } from 'react-router-dom'\nimport { Post } from '../components/Post'\nimport { Comment } from '../components/Comment'\nimport { LoadingSpinner } from '../components/LoadingSpinner'\nimport { ErrorMessage } from '../components/ErrorMessage'\nimport './PostPage.css'\n\nexport const PostPage = ({ match }) => {\n  const FETCH_POST_WITH_COMMENTS = gql`\n    query FetchPostWithComments {\n      getPost(id: \"${match.params.id}\") {\n        title\n        user {\n          userName\n        }\n        subreadit {\n          name\n        }\n        voteCount\n        commentsAggregate {\n          count\n        }\n        comments {\n          commentContent\n          voteCount\n          user {\n            userName\n          }\n        }\n      }\n    }\n  `\n\n  const { loading, data, error } = useQuery(FETCH_POST_WITH_COMMENTS)\n\n  return (\n    <div className=\"postPage\">\n      {loading && <LoadingSpinner />}\n      {error && <ErrorMessage />}\n      {data &&\n        (data.getPost ? (\n          <>\n            <Post\n              title={data.getPost.title}\n              voteCount={data.getPost.voteCount}\n              commentCount={data.getPost.commentsAggregate?.count}\n              subreaditName={data.getPost.subreadit.name}\n              userName={data.getPost.user.userName}\n            />\n            <h2>Comments</h2>\n            <div className=\"commentsSection\">\n              {data.getPost.comments.length ? (\n                data.getPost.comments.map(comment => (\n                  <Comment\n                    key={comment.commentContent}\n                    isOnPostPage\n                    commentContent={comment.commentContent}\n                    voteCount={comment.voteCount}\n                    userName={comment.user.userName}\n                  />\n                ))\n              ) : (\n                <p>No comments yet!</p>\n              )}\n            </div>\n          </>\n        ) : (\n          <ErrorMessage />\n        ))}\n    </div>\n  )\n}\n\nexport const PostPageWithRouter = withRouter(PostPage)\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { withRouter } from 'react-router-dom'\nimport { Subreadit } from '../components/Subreadit'\nimport { Post } from '../components/Post'\nimport { LoadingSpinner } from '../components/LoadingSpinner'\nimport { ErrorMessage } from '../components/ErrorMessage'\nimport './SubreaditPage.css'\n\nexport const SubreaditPage = ({ match }) => {\n  const FETCH_SUBREADIT_WITH_POSTS = gql`\n    query FetchSubreaditWithPosts {\n      querySubreadit(filter: { name: { eq: \"${match.params.id}\" } }) {\n        name\n        description\n        posts {\n          id\n          title\n          user {\n            userName\n          }\n          voteCount\n          commentsAggregate {\n            count\n          }\n        }\n      }\n    }\n  `\n\n  const { loading, data, error } = useQuery(FETCH_SUBREADIT_WITH_POSTS)\n\n  return (\n    <div className=\"subreaditPage\">\n      {loading && <LoadingSpinner />}\n      {error && <ErrorMessage />}\n      {data &&\n        (data?.querySubreadit.length ? (\n          <>\n            <Subreadit\n              title={data.querySubreadit[0].name}\n              description={data.querySubreadit[0].description}\n            />\n            <h2>Posts</h2>\n            <div className=\"postsSection\">\n              {data.querySubreadit[0].posts.length ? (\n                data.querySubreadit[0].posts.map(post => (\n                  <Post\n                    key={post.id}\n                    isPreview\n                    isOnSubreaditPage\n                    id={post.id}\n                    title={post.title}\n                    voteCount={post.voteCount}\n                    commentCount={post.commentsAggregate?.count}\n                    subreaditName={data.querySubreadit[0].name}\n                    userName={post.user.userName}\n                  />\n                ))\n              ) : (\n                <p>No posts yet!</p>\n              )}\n            </div>\n          </>\n        ) : (\n          <ErrorMessage />\n        ))}\n    </div>\n  )\n}\n\nexport const SubreaditPageWithRouter = withRouter(SubreaditPage)\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { withRouter } from 'react-router-dom'\nimport { User } from '../components/User'\nimport { Post } from '../components/Post'\nimport { Comment } from '../components/Comment'\nimport { LoadingSpinner } from '../components/LoadingSpinner'\nimport { ErrorMessage } from '../components/ErrorMessage'\nimport './UserPage.css'\n\nexport const UserPage = ({ match }) => {\n  const FETCH_USER = gql`\n    query FetchUser {\n      queryUser(filter: { userName: { eq: \"${match.params.id}\" } }) {\n        userName\n        bio\n        posts {\n          id\n          title\n          user {\n            userName\n          }\n          subreadit {\n            name\n          }\n          voteCount\n          commentsAggregate {\n            count\n          }\n        }\n        postsAggregate {\n          count\n        }\n        comments {\n          id\n          commentContent\n          voteCount\n          user {\n            userName\n          }\n          post {\n            title\n            id\n          }\n        }\n        commentsAggregate {\n          count\n        }\n      }\n    }\n  `\n\n  const { loading, data, error } = useQuery(FETCH_USER)\n\n  return (\n    <div className=\"userPage\">\n      {loading && <LoadingSpinner />}\n      {error && <ErrorMessage />}\n      {data &&\n        (data?.queryUser.length ? (\n          <>\n            <User\n              userName={data.queryUser[0].userName}\n              bio={data.queryUser[0].bio}\n              postCount={data.queryUser[0].postsAggregate?.count}\n              commentCount={data.queryUser[0].commentsAggregate?.count}\n            />\n            <h2>Posts</h2>\n            <div className=\"postsSection\">\n              {data.queryUser[0].posts.length ? (\n                data.queryUser[0].posts.map(post => (\n                  <Post\n                    key={post.id}\n                    isPreview\n                    isOnUserPage\n                    id={post.id}\n                    title={post.title}\n                    voteCount={post.voteCount}\n                    commentCount={post.commentsAggregate?.count}\n                    subreaditName={post.subreadit.name}\n                    userName={post.user.userName}\n                  />\n                ))\n              ) : (\n                <p>No posts yet!</p>\n              )}\n            </div>\n            <h2>Comments</h2>\n            <div className=\"commentsSection\">\n              {data.queryUser[0].comments.length ? (\n                data.queryUser[0].comments.map(comment => (\n                  <Comment\n                    key={comment.id}\n                    isOnUserPage\n                    postTitle={comment.post.title}\n                    postId={comment.post.id}\n                    commentContent={comment.commentContent}\n                    voteCount={comment.voteCount}\n                    userName={comment.user.userName}\n                  />\n                ))\n              ) : (\n                <p>No comments yet!</p>\n              )}\n            </div>\n          </>\n        ) : (\n          <ErrorMessage />\n        ))}\n    </div>\n  )\n}\n\nexport const UserPageWithRouter = withRouter(UserPage)\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport { Nav } from './components/Nav'\nimport { HomePage } from './pages/HomePage'\nimport { PostPageWithRouter } from './pages/PostPage'\nimport { SubreaditPageWithRouter } from './pages/SubreaditPage'\nimport { UserPageWithRouter } from './pages/UserPage'\nimport './App.css'\n\nexport function App() {\n  return (\n    <Router basename=\"/reddit-clone/build\">\n      <div>\n        <Nav />\n        <main>\n          <Switch>\n            <Route path=\"/subreadit/:id\">\n              <SubreaditPageWithRouter />\n            </Route>\n            <Route path=\"/post/:id\">\n              <PostPageWithRouter />\n            </Route>\n            <Route path=\"/user/:id\">\n              <UserPageWithRouter />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/\" />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  )\n}\n","import { ApolloClient, InMemoryCache } from '@apollo/client'\n\nexport const apolloClient = new ApolloClient({\n  uri: 'https://reddit-clone.us-west-2.aws.cloud.dgraph.io/graphql',\n  cache: new InMemoryCache(),\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from '@apollo/client'\nimport './index.css'\nimport { App } from './App'\nimport { apolloClient } from './apolloClient'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}